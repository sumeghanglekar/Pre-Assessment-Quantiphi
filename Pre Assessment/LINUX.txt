Linux1Consider a text file which has multi-lines text, output all the lines which has a specific word and also output the total number of occurrences of that word2Search for all the files that have a ‘.txt’ extension in the current working directory3Execute a specific command in all the subdirectories whose names starts with “aws”. For example, your sub-directories are “aws_1”, “aws_2”, “gcp_1”, “aws_3”., Execute “pwd” command in the directories “aws_1”, “aws_2” and “aws_3”4Consider a text file and replace a specific word with any word of your choice5How to find a specific file in the system

Answers:
1. Consider a text file which has multi-lines text, output all the lines which has a specific word and also output the total number of occurrences of that word
Echo “Enter file name…”
Read fname;
Echo “Enter search pattern”
Read pattern;
for line in $fname;
do
	grep –c $pattern line;
done

2. Search for all the files that have a ‘.txt’ extension in the current working directory

	find . -type f -name “*.txt”

3. Execute a specific command in all the subdirectories whose names starts with “aws”. For example, your sub-directories are “aws_1”, “aws_2”, “gcp_1”, “aws_3”., Execute “pwd” command in the directories “aws_1”, “aws_2” and “aws_3”

for d in ./*/ ;
do 
	result=${d##*/}
	if [“$result” == “aws%” ]
	then	
		pwd "$d"
	fi
done

4. Consider a text file and replace a specific word with any word of your choice

Sed is a Stream Editor used for modifying the files in unix (or linux). Whenever you want to make changes to the file automatically, sed comes in handy to do this. 
Text file:
hi world
hi everyone
Syntax: sed -i 's/original/new/g' file.txt

•	sed = Stream EDitor
•	-i = in-place (i.e. save back to the original file)

The command string:
•	s = the substitute command
•	original = a regular expression describing the word to replace (or just the word itself)
•	new = the text to replace it with
•	g = global (i.e. replace all and not just the first occurrence)
•	file.txt = the file name

Command used: sed -i ‘s/hi/hello/g’ file.txt
Output: 
hello world
hello everyone

5. How to find a specific file in the system

Find Command:
The “find” command allows you to search for files for which you know the approximate filenames.
To find files that match a specific pattern, we can use the -name argument. You can use filename metacharacters (such as * ), but you should either put an escape character ( \ ) in front of each of them or enclose them in quotes.
For example, if we want to find all the files that start with “pro” in the Documents directory, we would use the cd Documents/ command to change to the Documents directory, and then type the following command:

Command: find . -name pro\*

Locate command:
The locate command is faster than the find command because it uses a previously built database, whereas the find command searches in the real system, through all the actual directories and files. The locate command returns a list of all path names containing the specified group of characters.
The database is updated periodically from cron, but you can also update it yourself at any time so you can obtain up-to-the-minute results. To do this, type the following command at the prompt:
Command: sudo updatedb
If you want to find all files or directories that contain exactly and only your search criteria, use the -b option with the locate command, as follows.
Command: locate -b ‘\mydata’
The backslash in the above command is a globbing character, which provides a way of expanding wildcard characters in a non-specific file name into a set of specific filenames. A wildcard is a symbol that can be replaced by one or more characters when the expression is evaluated. The most common wildcard symbols are the question mark ( ? ), which stands for a single character and the asterisk ( * ), which stands for a contiguous string of characters.
